(load "zs_test_util.scm")

(test-eq #t (pair? '(a . b)))
(test-eq #t (pair? '(a b c)))
(test-eq #f (pair? '()))
(test-eq #f (pair? #(a b)))

(test-eq #t (null? ()))
(test-eq #t (null? '()))
(test-eq #f (null? 'a))
(test-eq #f (null? '100))
(test-eq #f (null? "hoge"))
(test-eq #f (null? '(a)))
(test-eq #f (null? '(a . b)))

(test-equal '(a) (cons 'a '()))
(test-equal '((a) b c d) (cons '(a) '(b c d)))
(test-equal '("a" b c) (cons "a" '(b c)))
(test-equal '(a . 3) (cons 'a 3))
(test-equal '((a b) . c) (cons '(a  b) 'c))
  
(test-equal 'a (car '(a b c)))
(test-equal '(a) (car '((a) b c d)))
(test-equal 1 (car '(1 . 2)))
(test-error (car '()))
  
(test-equal '(b c d) (cdr '((a) b c d)))
(test-equal '2 (cdr '(1 . 2)))
(test-error (cdr '()))

(define tmp (cons 'a 'b))
(test-equal '(a . b) tmp)
(set-car! tmp 1)
(test-equal '(1 . b) tmp)
(set-cdr! tmp 2)
(test-equal '(1 . 2) tmp)

(test-eq #t (list? '(a b c)))
(test-eq #t (list? '()))
(test-eq #f (list? '(a . b)))
(test-eq #f (let ((x (list 'a))) 
              (set-cdr! x x) 
              (list? x)))

(test-equal '(1) (list 1))
(test-equal '(1 2) (list 1 2))
(test-equal '(1 2 3) (list 1 2 3))
(test-equal '(a 7 c) (list 'a (+ 4 3) 'c))
(test-equal '() (list))

(test-equal '1 (list* 1))
(test-equal '(1 . 2) (list* 1 2))
(test-equal '(1 2 . 3) (list* 1 2 3))

(test-equal '3 (length '(a b c)))
(test-equal '3 (length '(a (b) (c d e))))
(test-equal '0 (length '()))

(test-equal '(1 2 3) (append '(1 2 3)))
(test-equal '(1 2 3 4 5 6) (append '(1 2 3) '(4 5 6)))
(test-equal '(1 2 3) (append '(1 2 3) '()))
(test-equal '(1 2 3) (append '() '(1 2 3)))
(test-equal '(1 2 3 . a) (append '(1 2 3) 'a))
(test-equal '(x y) (append '(x) '(y)))
(test-equal '(a b c d) (append '(a) '(b c d)))
(test-equal '(a (b) (c)) (append '(a (b)) '((c))))
(test-equal '(a b c . d) (append '(a b) '(c . d)))
(test-equal 'a (append '() 'a))
(test-equal 'a (append '() '() '() '() 'a))

(test-equal '(c b a) (reverse '(a b c)))
(test-equal '((e (f)) d (b c) a) (reverse '(a (b c) d (e (f)))))

(test-equal '(c d) (list-tail '(a b c d) 2))

(test-equal 'c (list-ref '(a b c d) 2))

(define c2r-test '((a . b) . (c . d)))
(test-equal 'a (caar c2r-test))
(test-equal 'b (cdar c2r-test))
(test-equal 'c (cadr c2r-test))
(test-equal 'd (cddr c2r-test))

(define c3r-test '(((a . b) . (c . d)) . ((e . f) . (g . h))))
(test-equal 'a (caaar c3r-test))
(test-equal 'b (cdaar c3r-test))
(test-equal 'c (cadar c3r-test))
(test-equal 'd (cddar c3r-test))
(test-equal 'e (caadr c3r-test))
(test-equal 'f (cdadr c3r-test))
(test-equal 'g (caddr c3r-test))
(test-equal 'h (cdddr c3r-test))

(define c4r-test
  '((((aa . ad) . (ba . bd)) . ((ca . cd) . (da . dd)))
    . (((ea . ed) . (fa . fd)) . ((ga . gd) . (ha . hd)))))
(test-equal 'aa (caaaar c4r-test))
(test-equal 'ad (cdaaar c4r-test))
(test-equal 'ba (cadaar c4r-test))
(test-equal 'bd (cddaar c4r-test))
(test-equal 'ca (caadar c4r-test))
(test-equal 'cd (cdadar c4r-test))
(test-equal 'da (caddar c4r-test))
(test-equal 'dd (cdddar c4r-test))
(test-equal 'ea (caaadr c4r-test))
(test-equal 'ed (cdaadr c4r-test))
(test-equal 'fa (cadadr c4r-test))
(test-equal 'fd (cddadr c4r-test))
(test-equal 'ga (caaddr c4r-test))
(test-equal 'gd (cdaddr c4r-test))
(test-equal 'ha (cadddr c4r-test))
(test-equal 'hd (cddddr c4r-test))

(test-equal '(a b c) (memq 'a '(a b c)))
(test-equal '(b c) (memq 'b '(a b c)))
(test-eq #f (memq 'a '(b c d)))
(test-eq #f (memq (list 'a) '(b (a) c)))
(test-equal '((a) c) (member (list 'a) '(b (a) c)))
(test-equal '(101 102) (memq 101 '(100 101 102))) ; unspecified
(test-equal '(101 102) (memv 101 '(100 101 102)))

(define e '((a 1) (b 2) (c 3)))
(test-equal '(a 1) (assq 'a e))
(test-equal '(b 2) (assq 'b e))
(test-eq #f (assq 'd e))
(test-eq #f (assq (list 'a) '(((a)) ((b)) ((c)))))
(test-equal '((a)) (assoc (list 'a) '(((a)) ((b)) ((c)))))
(test-equal '(5 7) (assq 5 '((2 3) (5 7) (11 13)))) ; unspecified
(test-equal '(5 7) (assv 5 '((2 3) (5 7) (11 13))))


(zs-test-report)
